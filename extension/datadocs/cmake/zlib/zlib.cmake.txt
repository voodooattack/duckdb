# Zlib CMakefile
# Target Libxml2 version: v2.9.10

# GAB: this file (and its companions cmake files) have been copied from the upstream repository
# with additional modifications marked by # GAB comments

cmake_minimum_required(VERSION 2.4.4)
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)

project(zlib C)

set(VERSION "1.2.11")

include(CheckTypeSize)
include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckCSourceCompiles)
enable_testing()

check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(stdint.h    HAVE_STDINT_H)
check_include_file(stddef.h    HAVE_STDDEF_H)

#
# Check to see if we have large file support
#
set(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)
# We add these other definitions here because CheckTypeSize.cmake
# in CMake 2.4.x does not automatically do so and we want
# compatibility with CMake 2.4.x.
if(HAVE_SYS_TYPES_H)
  list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)
endif()
if(HAVE_STDINT_H)
  list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)
endif()
if(HAVE_STDDEF_H)
  list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)
endif()
check_type_size(off64_t OFF64_T)
if(HAVE_OFF64_T)
  add_definitions(-D_LARGEFILE64_SOURCE=1)
endif()
set(CMAKE_REQUIRED_DEFINITIONS) # clear variable

#
# Check for fseeko
#
check_function_exists(fseeko HAVE_FSEEKO)
if(NOT HAVE_FSEEKO)
  add_definitions(-DNO_FSEEKO)
endif()

#
# Check for unistd.h
#
check_include_file(unistd.h Z_HAVE_UNISTD_H)

if(MSVC)
  set(CMAKE_DEBUG_POSTFIX "d")
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
  include_directories(${DATADOCS_ZLIB_SOURCE_DIR})
endif()

# GAB: updated autogenrated file path to ${DATADOCS_ZLIB_BUILD_DIR}
set(ZLIB_PC ${DATADOCS_ZLIB_BUILD_DIR}/zlib.pc)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/zlib/zlib.pc.cmakein
        ${ZLIB_PC} @ONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/zlib/zconf.h.cmakein
        ${DATADOCS_ZLIB_BUILD_DIR}/zconf.h @ONLY)
include_directories(${DATADOCS_ZLIB_SOURCE_DIR} ${DATADOCS_ZLIB_BUILD_DIR})


#============================================================================
# zlib
#============================================================================

# GAB: prefixed all source files with ${DATADOCS_ZLIB_SOURCE_DIR}/zlib, to match with zlib.txt.in

set(ZLIB_PUBLIC_HDRS
        ${DATADOCS_ZLIB_BUILD_DIR}/zconf.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/zlib.h
        )
set(ZLIB_PRIVATE_HDRS
        ${DATADOCS_ZLIB_SOURCE_DIR}/crc32.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/deflate.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/gzguts.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/inffast.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/inffixed.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/inflate.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/inftrees.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/trees.h
        ${DATADOCS_ZLIB_SOURCE_DIR}/zutil.h
        )
set(ZLIB_SRCS
        ${DATADOCS_ZLIB_SOURCE_DIR}/adler32.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/compress.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/crc32.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/deflate.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/gzclose.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/gzlib.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/gzread.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/gzwrite.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/inflate.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/infback.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/inftrees.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/inffast.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/trees.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/uncompr.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/zutil.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/contrib/minizip/unzip.c
        ${DATADOCS_ZLIB_SOURCE_DIR}/contrib/minizip/ioapi.c
        )

# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION
file(READ ${DATADOCS_ZLIB_SOURCE_DIR}/zlib.h _zlib_h_contents)
string(REGEX REPLACE ".*#define[ \t]+ZLIB_VERSION[ \t]+\"([-0-9A-Za-z.]+)\".*"
        "\\1" ZLIB_FULL_VERSION ${_zlib_h_contents})

# GAB: zlib is now only statically linked
add_library(zlib STATIC ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})

#add_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
#set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
#set_target_properties(zlib PROPERTIES SOVERSION 1)
